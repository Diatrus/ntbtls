/* ntbtls.h -  Not Too Bad TLS                                  -*- c -*-
 * Copyright (C) 2014 g10 Code GmbH
 *
 * This file is part of NTBTLS
 *
 * NTBTLS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * NTBTLS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 *
 * File: @configure_input@
 */

#ifndef _NTBTLS_H
#define _NTBTLS_H

#include <gpg-error.h>

#ifdef __cplusplus
extern "C" {
#if 0 /* (Keep Emacsens' auto-indent happy.) */
}
#endif
#endif

/* The version of this header should match the one of the library. It
   should not be used by a program because ntbtls_check_version()
   should return the same version.  The purpose of this macro is to
   let autoconf (using the AM_PATH_NTBTLS macro) check that this
   header matches the installed library.  */
#define NTBTLS_VERSION "@VERSION@"

/* The version number of this header.  It may be used to handle minor
   API incompatibilities.  */
#define NTBTLS_VERSION_NUMBER @VERSION_NUMBER@


/* Flags used by ntbtls_new.  */
#define NTBTLS_SERVER      0
#define NTBTLS_CLIENT      1
#define NTBTLS_SAMETRHEAD  (1<<4)


/* The TLS context object.  */
struct _ntbtls_context_s;
typedef struct _ntbtls_context_s *ntbtls_t;


/* Check that the library fulfills the version requirement.  */
const char *ntbtls_check_version (const char *req_version);

/* Create a new TLS context.  */
gpg_error_t ntbtls_new (ntbtls_t *r_tls, unsigned int flags);

/* Destroy an TLS context.  */
void        ntbtls_release (ntbtls_t tls);

/* Setup the transport streams (usually connected to one socket).  */
gpg_error_t ntbtls_set_transport (ntbtls_t tls,
                                  gpgrt_stream_t inbound,
                                  gpgrt_stream_t outbound);

/* Get the read and write stream for the plaintext.  */
gpg_error_t ntbtls_get_stream (ntbtls_t tls,
                               gpgrt_stream_t *r_readfp,
                               gpgrt_stream_t *r_writefp);

/* Set the hostname to check against the received server certificate.
   It is used for SNI, too.  */
gpg_error_t ntbtls_set_hostname (ntbtls_t tls, const char *hostname);

/* Perform the handshake with the peer.  The transport streams must be
   connected before starting this handshake.  */
gpg_error_t ntbtls_handshake (ntbtls_t tls);



/*
 * Support functions
 */

/* Enable debugging at LEVEL (> 0) using an optional PREFIX (default:
   "ntbtls") and an optional debug stream STREAM (default: es_stderr).
   This function is not thread-safe and shall thus be called only once
   before any extra threads have been started.  */
void ntbtls_set_debug (int level, const char *prefix, gpgrt_stream_t stream);


#if 0 /* (Keep Emacsens' auto-indent happy.) */
{
#endif
#ifdef __cplusplus
}
#endif
#endif /* _NTBTLS_H */
/*
@emacs_local_vars_begin@
@emacs_local_vars_read_only@
@emacs_local_vars_end@
*/
